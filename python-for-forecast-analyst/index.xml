<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python-for-forecast-analyst on Data Analyst&#39;s Blog</title>
    <link>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/</link>
    <description>Recent content in Python-for-forecast-analyst on Data Analyst&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Wed, 13 Oct 2021 22:45:50 -0600</lastBuildDate><atom:link href="https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Date to beginning of Month</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/change_dates_to_first_day/</link>
      <pubDate>Wed, 13 Oct 2021 22:45:50 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/change_dates_to_first_day/</guid>
      <description>Pandas.Timestamp.replace(day=1) can change a single Timestamp to the beginning of a month. But when we have a Series of date or a date column, this method will no longer work. I have to do do this every once in a while. I have used several methods, and I am summarizing them in this post.
First let me create a small Pandas&amp;rsquo;s DataFrame containing a column of dates:
   ID Dates     1 2021-01-23 14:05:21   2 2021-02-05 05:07:30   3 2021-02-18 17:08:51   4 2021-01-01 05:07:30   5 2021-01-31 05:07:30    Method 1.</description>
    </item>
    
    <item>
      <title>Time deltas and Date offsets in Pandas</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/timedelta_timeoffsets_in_pandas/</link>
      <pubDate>Tue, 12 Oct 2021 23:06:19 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/timedelta_timeoffsets_in_pandas/</guid>
      <description>Pandas&amp;rsquo;s Timedelta represents the difference between two Timestamps, but there is a little difference from the dateutil.relativedelta that I introduced in another post, which is equivalent to the Dateoffsets in Pandas. I was once confused about Pandas&amp;rsquo;s Timedelta and Dateoffsets, so I decided to write a post about them today.
Timedelta and Dateoffsets are almost the same when time zone information is not provided. When time zone is provided, one difference is that Timedelta of one day adds 24 hours to a Timestamp, while DateOffset of one day adds a day to a Timestamp.</description>
    </item>
    
    <item>
      <title>Timestamp in Pandas</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/timestamp_in_pandas/</link>
      <pubDate>Sat, 09 Oct 2021 14:47:39 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/timestamp_in_pandas/</guid>
      <description>Instantiation Timestamp in Pandas is similar to Pythonâ€™s Datetime objects, but Pandas&amp;rsquo;s Timestamp is more flexible when it comes to instantiation. For example, the following code does the same thing to return a Timestamp(&amp;lsquo;2018-01-05 00:00:00&amp;rsquo;):
pd.Timestamp(&amp;quot;2018-01-05&amp;quot;) pd.Timestamp(&amp;quot;01-05-2018&amp;quot;) pd.Timestamp(&amp;quot;01 05 2018&amp;quot;) pd.Timestamp(&amp;quot;2018/01/05&amp;quot;) But I would stick with one format, for example, &amp;ldquo;2018-01-05&amp;rdquo;.
It is also convenient to get the Timestamp of right now:
pd.Timestamp(&amp;quot;today&amp;quot;) Using key word arguments will also work, for example:</description>
    </item>
    
    <item>
      <title>Python dateutil module</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/dateutil_module/</link>
      <pubDate>Sun, 20 Jun 2021 19:57:25 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/dateutil_module/</guid>
      <description>When we need to do any operations between two date/datetime objects, for example, addition or subtraction, we will need datedelta/timedelta. Unfortunately, the timedelta class included in datetime module has limited functions (in case you are interested: documentation). Python Numpy and Pandas have datedelta/timedelta objects, but if we are dealing with single datetime object, I found that dateutil is more intuitive. Although dateutil has many powerful functions, I will only introduce one function, the relativedelta(), which I use the most frequently.</description>
    </item>
    
    <item>
      <title>Python datetime module</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/date_functions/</link>
      <pubDate>Tue, 15 Jun 2021 23:58:51 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/date_functions/</guid>
      <description>I am dealing with time series data every day. So, the first Python module I want to mention is datetime which provides basic classes for dates and time manipulation.
I am helping several international markets with forecasting, but most of the time I don&amp;rsquo;t need to worry about time zone or daylight saving time, etc. If you are interested in the datetime type that include such information, you can learn more about it from the documentation.</description>
    </item>
    
  </channel>
</rss>
