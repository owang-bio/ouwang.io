<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Data Analyst&#39;s Blog</title>
    <link>https://owang-bio.github.io/ouwang.io/</link>
    <description>Recent content on Data Analyst&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 01 Nov 2021 01:16:30 -0600</lastBuildDate><atom:link href="https://owang-bio.github.io/ouwang.io/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pandasql</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandasql_part1/</link>
      <pubDate>Mon, 01 Nov 2021 01:16:30 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandasql_part1/</guid>
      <description>It would be nice if we can write SQL code to query Pandas DataFrame, and pandasql is just the package that enabled this. It accepts sqlite syntax and it support window functions. In this post, I am going to demonstrate why sometimes it is more convenient to write sql queries than calling Pandas functions.
First, let&amp;rsquo;s set up some DataFrame, department:
 id name     1 Operations   2 IT   3 HR    and employee:</description>
    </item>
    
    <item>
      <title>Dealing With Missing Values With Pandas</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_dealing_with_na/</link>
      <pubDate>Fri, 29 Oct 2021 22:37:58 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_dealing_with_na/</guid>
      <description>We are not living in a perfect world, so there are almost always some missing data. This post only introduce Pandas&amp;rsquo;s methods that allow us to work with missing values. I will write about techniques to replace NAs in data analytics posts.
First, Pandas has its own NA objects, which can be created by calling pandas.NA. However, pandas.NA is a little weird because we cannot convert a Series/DataFrame into &amp;lsquo;float&amp;rsquo; data type if it contains pandas.</description>
    </item>
    
    <item>
      <title>Pandas where() vs Numpy.where()</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_numpy_where/</link>
      <pubDate>Fri, 29 Oct 2021 00:44:08 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_numpy_where/</guid>
      <description>Pandas and Numpy have lots of methods that share the same name, and where() is one of them that I use very often. They are both if&amp;hellip;else&amp;hellip; function, but there are some difference and this post will explain the difference.
Let&amp;rsquo;s start with a DataFrame (df):
 id value     0 1   1 2   2 3   3 4   4 5    Pandas where() is a Series method, and the first positional keyword &amp;ldquo;cond&amp;rdquo; takes a condition.</description>
    </item>
    
    <item>
      <title>String Functions in Pandas</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/string_functions_in_pandas/</link>
      <pubDate>Tue, 26 Oct 2021 22:56:13 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/string_functions_in_pandas/</guid>
      <description>To apply to string methods to strings in a Pandas Series, a .str accessor is needed. For example:
Series.str.lower() This post will focus on four string methods, replace(), contains(), extract(), match(). The more comprehensive list of string methods for Pandas Series can be find here. In my opinion, in order to use extract() and match(), a basic understanding of regular expression is a must.
We can create a Series (variable named as demo_str) of string to demonstrate these functions:</description>
    </item>
    
    <item>
      <title>Pandas Datetime Resampling - Part 2</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_datetime_resampling_part2/</link>
      <pubDate>Mon, 25 Oct 2021 22:47:39 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_datetime_resampling_part2/</guid>
      <description>Pandas&amp;rsquo;s documentation about the closed and label argument for resample() is somewhat confusing, which is why I decided to write this post.
1. Closed Let&amp;rsquo;s start with following dataset (variable name: ts) which has a frequency of day, and a value of 1 for each date:
2021-01-01 1 2021-01-02 1 2021-01-03 1 2021-01-04 1 2021-01-05 1 2021-01-06 1 2021-01-07 1 2021-01-08 1 2021-01-09 1 2021-01-10 1 2021-01-11 1 2021-01-12 1 Freq: D, Name: value, dtype: int64 Now if we resample it (and get the sum of values) to a frequency of 5-day, and add a keyword argument closed:</description>
    </item>
    
    <item>
      <title>Pandas Datetime index</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_datetimeindex/</link>
      <pubDate>Mon, 25 Oct 2021 00:01:37 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_datetimeindex/</guid>
      <description>Pandas Datatime index helps the performance when we need to do a lot of calculations associated with datetime. It also provides convenient methods to access the data from a DataFrame/Series because datetime has attributes such as month, year&amp;hellip; In addition, the resample() will work only if the index is datetime.
Let&amp;rsquo;s use a DataFrame with datetime index to demonstrate some of its use cases. The DataFrame df is defined as:</description>
    </item>
    
    <item>
      <title>Pandas Datetime Resampling - Part 1</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_datetime_resampling/</link>
      <pubDate>Sun, 24 Oct 2021 00:50:45 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_datetime_resampling/</guid>
      <description>Resampling in Pandas is a very convenient method to &amp;ldquo;aggregate&amp;rdquo; your data based on specific time interval. It works like groupby in Pandas (or GROUP BY in SQL), but it offers more flexibility. For example, the groupby method in Pandas only aggregate data based on the attributes included in a column. But resampling for datetime can &amp;ldquo;aggregate&amp;rdquo; data based on any user defined time interval. It might be easier to demonstrate with an example: given a Pandas DataFrame (df) of:</description>
    </item>
    
    <item>
      <title>Pandas Time Span</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_time_span/</link>
      <pubDate>Fri, 22 Oct 2021 00:50:03 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_time_span/</guid>
      <description>Pandas time span represents a period of time, for example, one day, one month, or one year&amp;hellip; It is also called period object. I do not use time span object very often, but it is one of four pandas objects related to datetime. So, I am writing a very brief introduction for time span.
To create a time span object, we can use Period() method:
pd.Period() The keyword argument freq specify the span of the time.</description>
    </item>
    
    <item>
      <title>Date to End of a Month</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/change_dates_to_last_day/</link>
      <pubDate>Mon, 18 Oct 2021 23:27:22 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/change_dates_to_last_day/</guid>
      <description>Occasionally, I need to convert a series/column of dates to the last day of the same month. This post will introduce two methods that I have used.
First let me create a small Pandas&amp;rsquo;s DataFrame (saved as date_df variable) containing a column of dates:
   ID Dates     1 2021-01-23 14:05:21   2 2021-02-05 05:07:30   3 2021-02-18 17:08:51   4 2021-01-01 05:07:30   5 2021-01-31 05:07:30    Method 1.</description>
    </item>
    
    <item>
      <title>Date to beginning of a Month</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/change_dates_to_first_day/</link>
      <pubDate>Wed, 13 Oct 2021 22:45:50 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/change_dates_to_first_day/</guid>
      <description>Pandas.Timestamp.replace(day=1) can change a single Timestamp to the beginning of a month. But when we have a Series of date or a date column, this method will no longer work. I have to do do this every once in a while. I have used several methods, and I am summarizing them in this post.
First let me create a small Pandas&amp;rsquo;s DataFrame containing a column of dates:
   ID Dates     1 2021-01-23 14:05:21   2 2021-02-05 05:07:30   3 2021-02-18 17:08:51   4 2021-01-01 05:07:30   5 2021-01-31 05:07:30    Method 1.</description>
    </item>
    
    <item>
      <title>Time deltas and Date offsets in Pandas</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/timedelta_timeoffsets_in_pandas/</link>
      <pubDate>Tue, 12 Oct 2021 23:06:19 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/timedelta_timeoffsets_in_pandas/</guid>
      <description>Pandas&amp;rsquo;s Timedelta represents the difference between two Timestamps, but there is a little difference from the dateutil.relativedelta that I introduced in another post, which is equivalent to the Dateoffsets in Pandas. I was once confused about Pandas&amp;rsquo;s Timedelta and Dateoffsets, so I decided to write a post about them today.
Timedelta and Dateoffsets are almost the same when time zone information is not provided. When time zone is provided, one difference is that Timedelta of one day adds 24 hours to a Timestamp, while DateOffset of one day adds a day to a Timestamp.</description>
    </item>
    
    <item>
      <title>Timestamp in Pandas</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/timestamp_in_pandas/</link>
      <pubDate>Sat, 09 Oct 2021 14:47:39 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/timestamp_in_pandas/</guid>
      <description>Instantiation Timestamp in Pandas is similar to Python’s Datetime objects, but Pandas&amp;rsquo;s Timestamp is more flexible when it comes to instantiation. For example, the following code does the same thing to return a Timestamp(&amp;lsquo;2018-01-05 00:00:00&amp;rsquo;):
pd.Timestamp(&amp;quot;2018-01-05&amp;quot;) pd.Timestamp(&amp;quot;01-05-2018&amp;quot;) pd.Timestamp(&amp;quot;01 05 2018&amp;quot;) pd.Timestamp(&amp;quot;2018/01/05&amp;quot;) But I would stick with one format, for example, &amp;ldquo;2018-01-05&amp;rdquo;.
It is also convenient to get the Timestamp of right now:
pd.Timestamp(&amp;quot;today&amp;quot;) Using key word arguments will also work, for example:</description>
    </item>
    
    <item>
      <title>Python dateutil module</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/dateutil_module/</link>
      <pubDate>Sun, 20 Jun 2021 19:57:25 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/dateutil_module/</guid>
      <description>When we need to do any operations between two date/datetime objects, for example, addition or subtraction, we will need datedelta/timedelta. Unfortunately, the timedelta class included in datetime module has limited functions (in case you are interested: documentation). Python Numpy and Pandas have datedelta/timedelta objects, but if we are dealing with single datetime object, I found that dateutil is more intuitive. Although dateutil has many powerful functions, I will only introduce one function, the relativedelta(), which I use the most frequently.</description>
    </item>
    
    <item>
      <title>Introduction</title>
      <link>https://owang-bio.github.io/ouwang.io/posts/introduction/</link>
      <pubDate>Wed, 16 Jun 2021 01:16:38 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/posts/introduction/</guid>
      <description>This is my GitHub page where I post things that might be helpful for data analysts who want to learn some Python.
The content will focus on specific functions or libraries in Python that I am using in my daily work.
I will keep each blog as short as 1 to 3 minutes reading so that if anyone would read it, they don&amp;rsquo;t get bored before finishing reading. :-)
My self-introduction can be found on this page.</description>
    </item>
    
    <item>
      <title>Python datetime module</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/date_functions/</link>
      <pubDate>Tue, 15 Jun 2021 23:58:51 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/date_functions/</guid>
      <description>I am dealing with time series data every day. So, the first Python module I want to mention is datetime which provides basic classes for dates and time manipulation.
I am helping several international markets with forecasting, but most of the time I don&amp;rsquo;t need to worry about time zone or daylight saving time, etc. If you are interested in the datetime type that include such information, you can learn more about it from the documentation.</description>
    </item>
    
    <item>
      <title>About Author</title>
      <link>https://owang-bio.github.io/ouwang.io/author/</link>
      <pubDate>Mon, 06 Apr 2020 02:07:31 +0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/author/</guid>
      <description>I am John Doe and currently working as a data &amp;amp; forecast analyst. I have been learning data analytics every day and taking notes using Microsoft OneNote. I think it would be interesting if I make my notes public, which is why I am creating this blog. I will spend a couple of minutes everyday and write about something I have learned every day. Hope some of my blogs can be helpful to some of the data people.</description>
    </item>
    
    <item>
      <title>Admin Panel</title>
      <link>https://owang-bio.github.io/ouwang.io/admin/</link>
      <pubDate>Mon, 06 Apr 2020 02:07:30 +0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/admin/</guid>
      <description></description>
    </item>
    
    <item>
      <title>All Sections</title>
      <link>https://owang-bio.github.io/ouwang.io/sections/</link>
      <pubDate>Mon, 06 Apr 2020 02:07:30 +0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/sections/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
