<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>datetime on Data Analyst&#39;s Blog</title>
    <link>https://owang-bio.github.io/ouwang.io/tags/datetime/</link>
    <description>Recent content in datetime on Data Analyst&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 09 Oct 2021 14:47:39 -0600</lastBuildDate><atom:link href="https://owang-bio.github.io/ouwang.io/tags/datetime/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Timestamp in Pandas</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/date_functions_in_pandas/</link>
      <pubDate>Sat, 09 Oct 2021 14:47:39 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/date_functions_in_pandas/</guid>
      <description>Instantiation Timestamp in Pandas is similar to Pythonâ€™s Datetime objects, but Pandas&amp;rsquo;s Timestamp is more flexible when it comes to instantiation. For example, the following code does the same thing to return a Timestamp(&amp;lsquo;2018-01-05 00:00:00&amp;rsquo;):
pd.Timestamp(&amp;quot;2018-01-05&amp;quot;) pd.Timestamp(&amp;quot;01-05-2018&amp;quot;) pd.Timestamp(&amp;quot;01 05 2018&amp;quot;) pd.Timestamp(&amp;quot;2018/01/05&amp;quot;) But I would stick with one format, for example, &amp;ldquo;2018-01-05&amp;rdquo;.
It is also convenient to get the Timestamp of right now:
pd.Timestamp(&amp;quot;today&amp;quot;) Using key word arguments will also work, for example:</description>
    </item>
    
    <item>
      <title>Python datetime module</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/date_functions/</link>
      <pubDate>Tue, 15 Jun 2021 23:58:51 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-forecast-analyst/date_functions/</guid>
      <description>I am dealing with time series data every day. So, the first Python module I want to mention is datetime which provides basic classes for dates and time manipulation.
I am helping several international markets with forecasting, but most of the time I don&amp;rsquo;t need to worry about time zone or daylight saving time, etc. If you are interested in the datetime type that include such information, you can learn more about it from the documentation.</description>
    </item>
    
  </channel>
</rss>
