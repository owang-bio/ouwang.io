<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>pandas on Data Analyst&#39;s Blog</title>
    <link>https://owang-bio.github.io/ouwang.io/tags/pandas/</link>
    <description>Recent content in pandas on Data Analyst&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Mon, 25 Oct 2021 22:47:39 -0600</lastBuildDate><atom:link href="https://owang-bio.github.io/ouwang.io/tags/pandas/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Pandas Datetime Resampling - Part 2</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_datetime_resampling_part2/</link>
      <pubDate>Mon, 25 Oct 2021 22:47:39 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_datetime_resampling_part2/</guid>
      <description>Pandas&amp;rsquo;s documentation about the closed and label argument for resample() is somewhat confusing, which is why I decided to write this post.
1. Closed Let&amp;rsquo;s start with following dataset (variable name: ts) which has a frequency of day, and a value of 1 for each date:
2021-01-01 1 2021-01-02 1 2021-01-03 1 2021-01-04 1 2021-01-05 1 2021-01-06 1 2021-01-07 1 2021-01-08 1 2021-01-09 1 2021-01-10 1 2021-01-11 1 2021-01-12 1 Freq: D, Name: value, dtype: int64 Now if we resample it (and get the sum of values) to a frequency of 5-day, and add a keyword argument closed:</description>
    </item>
    
    <item>
      <title>Pandas Datetime Resampling - Part 1</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_datetime_resampling/</link>
      <pubDate>Sun, 24 Oct 2021 00:50:45 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_datetime_resampling/</guid>
      <description>Resampling in Pandas is a very convenient method to &amp;ldquo;aggregate&amp;rdquo; your data based on specific time interval. It works like groupby in Pandas (or GROUP BY in SQL), but it offers more flexibility. For example, the groupby method in Pandas only aggregate data based on the attributes included in a column. But resampling for datetime can &amp;ldquo;aggregate&amp;rdquo; data based on any user defined time interval. It might be easier to demonstrate with an example: given a Pandas DataFrame (df) of:</description>
    </item>
    
    <item>
      <title>Pandas Time Span</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_time_span/</link>
      <pubDate>Fri, 22 Oct 2021 00:50:03 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/pandas_time_span/</guid>
      <description>Pandas time span represents a period of time, for example, one day, one month, or one year&amp;hellip; It is also called period object. I do not use time span object very often, but it is one of four pandas objects related to datetime. So, I am writing a very brief introduction for time span.
To create a time span object, we can use Period() method:
pd.Period() The keyword argument freq specify the span of the time.</description>
    </item>
    
    <item>
      <title>Date to End of a Month</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/change_dates_to_last_day/</link>
      <pubDate>Mon, 18 Oct 2021 23:27:22 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/change_dates_to_last_day/</guid>
      <description>Occasionally, I need to convert a series/column of dates to the last day of the same month. This post will introduce two methods that I have used.
First let me create a small Pandas&amp;rsquo;s DataFrame (saved as date_df variable) containing a column of dates:
   ID Dates     1 2021-01-23 14:05:21   2 2021-02-05 05:07:30   3 2021-02-18 17:08:51   4 2021-01-01 05:07:30   5 2021-01-31 05:07:30    Method 1.</description>
    </item>
    
    <item>
      <title>Date to beginning of a Month</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/change_dates_to_first_day/</link>
      <pubDate>Wed, 13 Oct 2021 22:45:50 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/change_dates_to_first_day/</guid>
      <description>Pandas.Timestamp.replace(day=1) can change a single Timestamp to the beginning of a month. But when we have a Series of date or a date column, this method will no longer work. I have to do do this every once in a while. I have used several methods, and I am summarizing them in this post.
First let me create a small Pandas&amp;rsquo;s DataFrame containing a column of dates:
   ID Dates     1 2021-01-23 14:05:21   2 2021-02-05 05:07:30   3 2021-02-18 17:08:51   4 2021-01-01 05:07:30   5 2021-01-31 05:07:30    Method 1.</description>
    </item>
    
    <item>
      <title>Time deltas and Date offsets in Pandas</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/timedelta_timeoffsets_in_pandas/</link>
      <pubDate>Tue, 12 Oct 2021 23:06:19 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/timedelta_timeoffsets_in_pandas/</guid>
      <description>Pandas&amp;rsquo;s Timedelta represents the difference between two Timestamps, but there is a little difference from the dateutil.relativedelta that I introduced in another post, which is equivalent to the Dateoffsets in Pandas. I was once confused about Pandas&amp;rsquo;s Timedelta and Dateoffsets, so I decided to write a post about them today.
Timedelta and Dateoffsets are almost the same when time zone information is not provided. When time zone is provided, one difference is that Timedelta of one day adds 24 hours to a Timestamp, while DateOffset of one day adds a day to a Timestamp.</description>
    </item>
    
    <item>
      <title>Timestamp in Pandas</title>
      <link>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/timestamp_in_pandas/</link>
      <pubDate>Sat, 09 Oct 2021 14:47:39 -0600</pubDate>
      
      <guid>https://owang-bio.github.io/ouwang.io/python-for-data-analyst/timestamp_in_pandas/</guid>
      <description>Instantiation Timestamp in Pandas is similar to Pythonâ€™s Datetime objects, but Pandas&amp;rsquo;s Timestamp is more flexible when it comes to instantiation. For example, the following code does the same thing to return a Timestamp(&amp;lsquo;2018-01-05 00:00:00&amp;rsquo;):
pd.Timestamp(&amp;quot;2018-01-05&amp;quot;) pd.Timestamp(&amp;quot;01-05-2018&amp;quot;) pd.Timestamp(&amp;quot;01 05 2018&amp;quot;) pd.Timestamp(&amp;quot;2018/01/05&amp;quot;) But I would stick with one format, for example, &amp;ldquo;2018-01-05&amp;rdquo;.
It is also convenient to get the Timestamp of right now:
pd.Timestamp(&amp;quot;today&amp;quot;) Using key word arguments will also work, for example:</description>
    </item>
    
  </channel>
</rss>
